#!/bin/bash
set -x

export ARCH=arm
export CROSS_COMPILE=arm-none-linux-gnueabihf-
export zImage_obj=$SRC_DIR/linux-5.6.11/arch/arm/boot/zImage
export dtb_obj=$SRC_DIR/linux-5.6.11/arch/arm/boot/dts/vexpress-v2p-ca9.dtb
export rootfs_obj=$IMAGE_DIR/rootfs.ext3

function arm_usage(){
    echo ""
	echo "usage for arm:"
	echo "  ./smake -arm zImage                -- cross-complie linux kernel zImage "
	echo "  ./smake -arm uImage                -- cross-complie linux kernel uImage "
	echo "  ./smake -arm uboot                 -- cross-complie uboot"
	echo "  ./smake -arm busybox               -- cross-complie busybox"
	echo "  ./smake -arm rootfs                -- create rootfs ext3 image"
	echo "  ./smake -arm clean_rootfs          -- clean rootfs dir"
	echo "  ./smake -arm run_uboot             -- run uboot in qemu without graphic"
	echo "  ./smake -arm run_zImage            -- run zImage in qemu with graphic"
	echo "  ./smake -arm debug_uboot           -- debug uboot use gdb in qemu without graphic"
	echo "  ./smake -arm debug_zImage          -- debug zImage use gdb in qemu with graphic"
	echo "  ./smake -arm clean_boot            -- clean uboot,reserve config"
	echo "  ./smake -arm clean_kernel          -- clean kernel,reserve config"
	echo "  ./smake -arm disclean_boot         -- deep clean uboot"
	echo "  ./smake -arm distclean_kernel      -- distclean kernel"
	echo "  ./smake -arm clean_busybox         -- clean busybox"
	echo "  ./smake -arm distclean_busybox     -- distclean busybox"
	echo "  ./smake -arm setup_net             -- setup net connection with qemu"
	echo "  ./smake -arm modules xxx           -- make kernel modules in src/modules/xxx,xxx indicates modules directory"
	echo "  ./smake -arm modules clean xxx     -- clean kernel modules in src/modules/xxx,xxx indicates modules directory"
    echo ""
}

function make_arm_zImage(){
    cd $SRC_DIR/linux-5.6.11
	#make vexpress_defconfig 
	cp ../configs/arch/arm/configs/qemu_defconfig arch/arm/configs/
	make qemu_defconfig
    #make -j12 zImage
    make bzImage -j$(nproc)
	make dtbs
	make modules
    echo "generate zImage dts succeed"

}

function make_arm_uImage(){
   export LOADADDR=0x60003000
   cd $SRC_DIR/linux-5.6.11
   make vexpress_defconfig
   make -j$(nproc) uImage
   make dtbs
   make modules
   echo "generate uImage succeed"
}

function make_arm_boot(){
   cd $SRC_DIR/u-boot-2020.04
   make vexpress_ca9x4_defconfig
   make -j$(nproc)
   echo "generate uboot succeed"
}

function make_arm_busybox(){
   cd $SRC_DIR/busybox-1.31.1
   cp ../configs/busybox/configs/qemu_arm_defconfig configs/
   make qemu_arm_defconfig 
  #make menuconfig
   make -j$(nproc)
   make install
   echo "generate busybox succeed"
}

function run_arm_boot(){
   cd $SRC_DIR/u-boot-2020.04
   qemu-system-arm -M vexpress-a9 \
       -m 256M -nographic -kernel u-boot \
       -net nic -net tap,ifname=tap0,script=no,downscript=no 
       #-sd $rootfs_obj
}

function debug_arm_boot(){
   cd $SRC_DIR/u-boot-2020.04
   qemu-system-arm -S -s -M vexpress-a9 \
       -m 256M -nographic -kernel u-boot \
       -net nic -net tap,ifname=tap0,script=no,downscript=no 
       #-sd $rootfs_obj
}

function run_arm_zImage(){
   sudo qemu-system-arm -M vexpress-a9 -m 512M -dtb $dtb_obj -kernel $zImage_obj -smp 4\
  	 -append "root=/dev/mmcblk0 rw console=ttyAMA0 loglevel=8" -sd $rootfs_obj\
       -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic
    # sudo qemu-system-arm -M vexpress-a9 \
	# -smp 4 \
	# -m 1024m \
	# -kernel $zImage_obj \
	# -append "root=/dev/mmcblk0 rw console=ttyAMA0 loglevel=8" \
	# -dtb $dtb_obj \
	# -sd $rootfs_obj \
    # -nographic
}

function run_arm_zImage_backup(){
   sudo qemu-system-arm -M vexpress-a9 -m 512M -dtb $dtb_obj -kernel $zImage_obj -smp 4\
  	 -append "root=/dev/mmcblk0 rw rootwait earlyprintk console=tty0 init=/linuxrc" -sd $rootfs_obj\
       -net nic -net tap,ifname=tap0,script=no,downscript=no 
}


function debug_arm_zImage(){
   sudo qemu-system-arm -S -s -M vexpress-a9 -m 512M -dtb $dtb_obj -kernel $zImage_obj -smp 4\
  	 -append "root=/dev/mmcblk0 rw rootwait earlyprintk console=tty0 init=/linuxrc" -sd $rootfs_obj\
       -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic
}
